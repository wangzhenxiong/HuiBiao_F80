package com.dy.huibiao_f80.greendao.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dy.huibiao_f80.greendao.TestRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST_RECORD".
*/
public class TestRecordDao extends AbstractDao<TestRecord, Long> {

    public static final String TABLENAME = "TEST_RECORD";

    /**
     * Properties of entity TestRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SysCode = new Property(1, String.class, "sysCode", false, "SYS_CODE");
        public final static Property Gallery = new Property(2, int.class, "gallery", false, "GALLERY");
        public final static Property Samplenum = new Property(3, String.class, "samplenum", false, "SAMPLENUM");
        public final static Property Samplename = new Property(4, String.class, "samplename", false, "SAMPLENAME");
        public final static Property Sampletype = new Property(5, String.class, "sampletype", false, "SAMPLETYPE");
        public final static Property FoodCode = new Property(6, String.class, "foodCode", false, "FOOD_CODE");
        public final static Property Symbol = new Property(7, String.class, "symbol", false, "SYMBOL");
        public final static Property Cov = new Property(8, String.class, "cov", false, "COV");
        public final static Property Cov_unit = new Property(9, String.class, "cov_unit", false, "COV_UNIT");
        public final static Property Stand_num = new Property(10, String.class, "stand_num", false, "STAND_NUM");
        public final static Property Prosecutedunits = new Property(11, String.class, "prosecutedunits", false, "PROSECUTEDUNITS");
        public final static Property Prosecutedunits_adress = new Property(12, String.class, "prosecutedunits_adress", false, "PROSECUTEDUNITS_ADRESS");
        public final static Property Dilutionratio = new Property(13, double.class, "dilutionratio", false, "DILUTIONRATIO");
        public final static Property Everyresponse = new Property(14, double.class, "everyresponse", false, "EVERYRESPONSE");
        public final static Property Controlvalue = new Property(15, String.class, "controlvalue", false, "CONTROLVALUE");
        public final static Property SerialNumber = new Property(16, String.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property Testresult = new Property(17, String.class, "testresult", false, "TESTRESULT");
        public final static Property Decisionoutcome = new Property(18, String.class, "decisionoutcome", false, "DECISIONOUTCOME");
        public final static Property Inspector = new Property(19, String.class, "inspector", false, "INSPECTOR");
        public final static Property Testingtime = new Property(20, Long.class, "testingtime", false, "TESTINGTIME");
        public final static Property Longitude = new Property(21, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(22, double.class, "latitude", false, "LATITUDE");
        public final static Property Testsite = new Property(23, String.class, "testsite", false, "TESTSITE");
        public final static Property Test_method = new Property(24, String.class, "test_method", false, "TEST_METHOD");
        public final static Property Test_project = new Property(25, String.class, "test_project", false, "TEST_PROJECT");
        public final static Property Test_moudle = new Property(26, String.class, "test_moudle", false, "TEST_MOUDLE");
        public final static Property PlanName = new Property(27, String.class, "planName", false, "PLAN_NAME");
        public final static Property Isupload = new Property(28, int.class, "isupload", false, "ISUPLOAD");
        public final static Property Unique_sample = new Property(29, String.class, "unique_sample", false, "UNIQUE_SAMPLE");
        public final static Property Unique_method = new Property(30, String.class, "unique_method", false, "UNIQUE_METHOD");
        public final static Property Unique_testproject = new Property(31, String.class, "unique_testproject", false, "UNIQUE_TESTPROJECT");
        public final static Property Unique_beunit = new Property(32, String.class, "unique_beunit", false, "UNIQUE_BEUNIT");
        public final static Property Unique_task = new Property(33, String.class, "unique_task", false, "UNIQUE_TASK");
        public final static Property Platform_tag = new Property(34, String.class, "platform_tag", false, "PLATFORM_TAG");
        public final static Property Test_unit_id = new Property(35, String.class, "test_unit_id", false, "TEST_UNIT_ID");
        public final static Property Test_unit_name = new Property(36, String.class, "test_unit_name", false, "TEST_UNIT_NAME");
        public final static Property Test_unit_reserved = new Property(37, String.class, "test_unit_reserved", false, "TEST_UNIT_RESERVED");
        public final static Property Sampleplace = new Property(38, String.class, "sampleplace", false, "SAMPLEPLACE");
        public final static Property Retest = new Property(39, int.class, "retest", false, "RETEST");
        public final static Property ParentSysCode = new Property(40, String.class, "parentSysCode", false, "PARENT_SYS_CODE");
        public final static Property Reservedfield1 = new Property(41, String.class, "reservedfield1", false, "RESERVEDFIELD1");
        public final static Property Reservedfield2 = new Property(42, String.class, "reservedfield2", false, "RESERVEDFIELD2");
        public final static Property Reservedfield3 = new Property(43, String.class, "reservedfield3", false, "RESERVEDFIELD3");
        public final static Property Reservedfield4 = new Property(44, String.class, "reservedfield4", false, "RESERVEDFIELD4");
        public final static Property Reservedfield5 = new Property(45, String.class, "reservedfield5", false, "RESERVEDFIELD5");
        public final static Property Reservedfield6 = new Property(46, String.class, "reservedfield6", false, "RESERVEDFIELD6");
        public final static Property Reservedfield7 = new Property(47, String.class, "reservedfield7", false, "RESERVEDFIELD7");
        public final static Property Reservedfield8 = new Property(48, String.class, "reservedfield8", false, "RESERVEDFIELD8");
        public final static Property Reservedfield9 = new Property(49, String.class, "reservedfield9", false, "RESERVEDFIELD9");
        public final static Property Reservedfield10 = new Property(50, String.class, "reservedfield10", false, "RESERVEDFIELD10");
        public final static Property Test_project1 = new Property(51, String.class, "test_project1", false, "TEST_PROJECT1");
        public final static Property Test_project2 = new Property(52, String.class, "test_project2", false, "TEST_PROJECT2");
        public final static Property Test_project3 = new Property(53, String.class, "test_project3", false, "TEST_PROJECT3");
        public final static Property Test_method1 = new Property(54, String.class, "test_method1", false, "TEST_METHOD1");
        public final static Property Test_method2 = new Property(55, String.class, "test_method2", false, "TEST_METHOD2");
        public final static Property Test_method3 = new Property(56, String.class, "test_method3", false, "TEST_METHOD3");
        public final static Property Unique_testproject1 = new Property(57, String.class, "unique_testproject1", false, "UNIQUE_TESTPROJECT1");
        public final static Property Unique_testproject2 = new Property(58, String.class, "unique_testproject2", false, "UNIQUE_TESTPROJECT2");
        public final static Property Unique_testproject3 = new Property(59, String.class, "unique_testproject3", false, "UNIQUE_TESTPROJECT3");
        public final static Property Testresult1 = new Property(60, String.class, "testresult1", false, "TESTRESULT1");
        public final static Property Testresult2 = new Property(61, String.class, "testresult2", false, "TESTRESULT2");
        public final static Property Testresult3 = new Property(62, String.class, "testresult3", false, "TESTRESULT3");
        public final static Property Decisionoutcome1 = new Property(63, String.class, "decisionoutcome1", false, "DECISIONOUTCOME1");
        public final static Property Decisionoutcome2 = new Property(64, String.class, "decisionoutcome2", false, "DECISIONOUTCOME2");
        public final static Property Decisionoutcome3 = new Property(65, String.class, "decisionoutcome3", false, "DECISIONOUTCOME3");
    }


    public TestRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TestRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYS_CODE\" TEXT," + // 1: sysCode
                "\"GALLERY\" INTEGER NOT NULL ," + // 2: gallery
                "\"SAMPLENUM\" TEXT," + // 3: samplenum
                "\"SAMPLENAME\" TEXT," + // 4: samplename
                "\"SAMPLETYPE\" TEXT," + // 5: sampletype
                "\"FOOD_CODE\" TEXT," + // 6: foodCode
                "\"SYMBOL\" TEXT," + // 7: symbol
                "\"COV\" TEXT," + // 8: cov
                "\"COV_UNIT\" TEXT," + // 9: cov_unit
                "\"STAND_NUM\" TEXT," + // 10: stand_num
                "\"PROSECUTEDUNITS\" TEXT," + // 11: prosecutedunits
                "\"PROSECUTEDUNITS_ADRESS\" TEXT," + // 12: prosecutedunits_adress
                "\"DILUTIONRATIO\" REAL NOT NULL ," + // 13: dilutionratio
                "\"EVERYRESPONSE\" REAL NOT NULL ," + // 14: everyresponse
                "\"CONTROLVALUE\" TEXT," + // 15: controlvalue
                "\"SERIAL_NUMBER\" TEXT," + // 16: serialNumber
                "\"TESTRESULT\" TEXT," + // 17: testresult
                "\"DECISIONOUTCOME\" TEXT," + // 18: decisionoutcome
                "\"INSPECTOR\" TEXT," + // 19: inspector
                "\"TESTINGTIME\" INTEGER," + // 20: testingtime
                "\"LONGITUDE\" REAL NOT NULL ," + // 21: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 22: latitude
                "\"TESTSITE\" TEXT," + // 23: testsite
                "\"TEST_METHOD\" TEXT," + // 24: test_method
                "\"TEST_PROJECT\" TEXT," + // 25: test_project
                "\"TEST_MOUDLE\" TEXT," + // 26: test_moudle
                "\"PLAN_NAME\" TEXT," + // 27: planName
                "\"ISUPLOAD\" INTEGER NOT NULL ," + // 28: isupload
                "\"UNIQUE_SAMPLE\" TEXT," + // 29: unique_sample
                "\"UNIQUE_METHOD\" TEXT," + // 30: unique_method
                "\"UNIQUE_TESTPROJECT\" TEXT," + // 31: unique_testproject
                "\"UNIQUE_BEUNIT\" TEXT," + // 32: unique_beunit
                "\"UNIQUE_TASK\" TEXT," + // 33: unique_task
                "\"PLATFORM_TAG\" TEXT," + // 34: platform_tag
                "\"TEST_UNIT_ID\" TEXT," + // 35: test_unit_id
                "\"TEST_UNIT_NAME\" TEXT," + // 36: test_unit_name
                "\"TEST_UNIT_RESERVED\" TEXT," + // 37: test_unit_reserved
                "\"SAMPLEPLACE\" TEXT," + // 38: sampleplace
                "\"RETEST\" INTEGER NOT NULL ," + // 39: retest
                "\"PARENT_SYS_CODE\" TEXT," + // 40: parentSysCode
                "\"RESERVEDFIELD1\" TEXT," + // 41: reservedfield1
                "\"RESERVEDFIELD2\" TEXT," + // 42: reservedfield2
                "\"RESERVEDFIELD3\" TEXT," + // 43: reservedfield3
                "\"RESERVEDFIELD4\" TEXT," + // 44: reservedfield4
                "\"RESERVEDFIELD5\" TEXT," + // 45: reservedfield5
                "\"RESERVEDFIELD6\" TEXT," + // 46: reservedfield6
                "\"RESERVEDFIELD7\" TEXT," + // 47: reservedfield7
                "\"RESERVEDFIELD8\" TEXT," + // 48: reservedfield8
                "\"RESERVEDFIELD9\" TEXT," + // 49: reservedfield9
                "\"RESERVEDFIELD10\" TEXT," + // 50: reservedfield10
                "\"TEST_PROJECT1\" TEXT," + // 51: test_project1
                "\"TEST_PROJECT2\" TEXT," + // 52: test_project2
                "\"TEST_PROJECT3\" TEXT," + // 53: test_project3
                "\"TEST_METHOD1\" TEXT," + // 54: test_method1
                "\"TEST_METHOD2\" TEXT," + // 55: test_method2
                "\"TEST_METHOD3\" TEXT," + // 56: test_method3
                "\"UNIQUE_TESTPROJECT1\" TEXT," + // 57: unique_testproject1
                "\"UNIQUE_TESTPROJECT2\" TEXT," + // 58: unique_testproject2
                "\"UNIQUE_TESTPROJECT3\" TEXT," + // 59: unique_testproject3
                "\"TESTRESULT1\" TEXT," + // 60: testresult1
                "\"TESTRESULT2\" TEXT," + // 61: testresult2
                "\"TESTRESULT3\" TEXT," + // 62: testresult3
                "\"DECISIONOUTCOME1\" TEXT," + // 63: decisionoutcome1
                "\"DECISIONOUTCOME2\" TEXT," + // 64: decisionoutcome2
                "\"DECISIONOUTCOME3\" TEXT);"); // 65: decisionoutcome3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TestRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sysCode = entity.getSysCode();
        if (sysCode != null) {
            stmt.bindString(2, sysCode);
        }
        stmt.bindLong(3, entity.getGallery());
 
        String samplenum = entity.getSamplenum();
        if (samplenum != null) {
            stmt.bindString(4, samplenum);
        }
 
        String samplename = entity.getSamplename();
        if (samplename != null) {
            stmt.bindString(5, samplename);
        }
 
        String sampletype = entity.getSampletype();
        if (sampletype != null) {
            stmt.bindString(6, sampletype);
        }
 
        String foodCode = entity.getFoodCode();
        if (foodCode != null) {
            stmt.bindString(7, foodCode);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(8, symbol);
        }
 
        String cov = entity.getCov();
        if (cov != null) {
            stmt.bindString(9, cov);
        }
 
        String cov_unit = entity.getCov_unit();
        if (cov_unit != null) {
            stmt.bindString(10, cov_unit);
        }
 
        String stand_num = entity.getStand_num();
        if (stand_num != null) {
            stmt.bindString(11, stand_num);
        }
 
        String prosecutedunits = entity.getProsecutedunits();
        if (prosecutedunits != null) {
            stmt.bindString(12, prosecutedunits);
        }
 
        String prosecutedunits_adress = entity.getProsecutedunits_adress();
        if (prosecutedunits_adress != null) {
            stmt.bindString(13, prosecutedunits_adress);
        }
        stmt.bindDouble(14, entity.getDilutionratio());
        stmt.bindDouble(15, entity.getEveryresponse());
 
        String controlvalue = entity.getControlvalue();
        if (controlvalue != null) {
            stmt.bindString(16, controlvalue);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(17, serialNumber);
        }
 
        String testresult = entity.getTestresult();
        if (testresult != null) {
            stmt.bindString(18, testresult);
        }
 
        String decisionoutcome = entity.getDecisionoutcome();
        if (decisionoutcome != null) {
            stmt.bindString(19, decisionoutcome);
        }
 
        String inspector = entity.getInspector();
        if (inspector != null) {
            stmt.bindString(20, inspector);
        }
 
        Long testingtime = entity.getTestingtime();
        if (testingtime != null) {
            stmt.bindLong(21, testingtime);
        }
        stmt.bindDouble(22, entity.getLongitude());
        stmt.bindDouble(23, entity.getLatitude());
 
        String testsite = entity.getTestsite();
        if (testsite != null) {
            stmt.bindString(24, testsite);
        }
 
        String test_method = entity.getTest_method();
        if (test_method != null) {
            stmt.bindString(25, test_method);
        }
 
        String test_project = entity.getTest_project();
        if (test_project != null) {
            stmt.bindString(26, test_project);
        }
 
        String test_moudle = entity.getTest_moudle();
        if (test_moudle != null) {
            stmt.bindString(27, test_moudle);
        }
 
        String planName = entity.getPlanName();
        if (planName != null) {
            stmt.bindString(28, planName);
        }
        stmt.bindLong(29, entity.getIsupload());
 
        String unique_sample = entity.getUnique_sample();
        if (unique_sample != null) {
            stmt.bindString(30, unique_sample);
        }
 
        String unique_method = entity.getUnique_method();
        if (unique_method != null) {
            stmt.bindString(31, unique_method);
        }
 
        String unique_testproject = entity.getUnique_testproject();
        if (unique_testproject != null) {
            stmt.bindString(32, unique_testproject);
        }
 
        String unique_beunit = entity.getUnique_beunit();
        if (unique_beunit != null) {
            stmt.bindString(33, unique_beunit);
        }
 
        String unique_task = entity.getUnique_task();
        if (unique_task != null) {
            stmt.bindString(34, unique_task);
        }
 
        String platform_tag = entity.getPlatform_tag();
        if (platform_tag != null) {
            stmt.bindString(35, platform_tag);
        }
 
        String test_unit_id = entity.getTest_unit_id();
        if (test_unit_id != null) {
            stmt.bindString(36, test_unit_id);
        }
 
        String test_unit_name = entity.getTest_unit_name();
        if (test_unit_name != null) {
            stmt.bindString(37, test_unit_name);
        }
 
        String test_unit_reserved = entity.getTest_unit_reserved();
        if (test_unit_reserved != null) {
            stmt.bindString(38, test_unit_reserved);
        }
 
        String sampleplace = entity.getSampleplace();
        if (sampleplace != null) {
            stmt.bindString(39, sampleplace);
        }
        stmt.bindLong(40, entity.getRetest());
 
        String parentSysCode = entity.getParentSysCode();
        if (parentSysCode != null) {
            stmt.bindString(41, parentSysCode);
        }
 
        String reservedfield1 = entity.getReservedfield1();
        if (reservedfield1 != null) {
            stmt.bindString(42, reservedfield1);
        }
 
        String reservedfield2 = entity.getReservedfield2();
        if (reservedfield2 != null) {
            stmt.bindString(43, reservedfield2);
        }
 
        String reservedfield3 = entity.getReservedfield3();
        if (reservedfield3 != null) {
            stmt.bindString(44, reservedfield3);
        }
 
        String reservedfield4 = entity.getReservedfield4();
        if (reservedfield4 != null) {
            stmt.bindString(45, reservedfield4);
        }
 
        String reservedfield5 = entity.getReservedfield5();
        if (reservedfield5 != null) {
            stmt.bindString(46, reservedfield5);
        }
 
        String reservedfield6 = entity.getReservedfield6();
        if (reservedfield6 != null) {
            stmt.bindString(47, reservedfield6);
        }
 
        String reservedfield7 = entity.getReservedfield7();
        if (reservedfield7 != null) {
            stmt.bindString(48, reservedfield7);
        }
 
        String reservedfield8 = entity.getReservedfield8();
        if (reservedfield8 != null) {
            stmt.bindString(49, reservedfield8);
        }
 
        String reservedfield9 = entity.getReservedfield9();
        if (reservedfield9 != null) {
            stmt.bindString(50, reservedfield9);
        }
 
        String reservedfield10 = entity.getReservedfield10();
        if (reservedfield10 != null) {
            stmt.bindString(51, reservedfield10);
        }
 
        String test_project1 = entity.getTest_project1();
        if (test_project1 != null) {
            stmt.bindString(52, test_project1);
        }
 
        String test_project2 = entity.getTest_project2();
        if (test_project2 != null) {
            stmt.bindString(53, test_project2);
        }
 
        String test_project3 = entity.getTest_project3();
        if (test_project3 != null) {
            stmt.bindString(54, test_project3);
        }
 
        String test_method1 = entity.getTest_method1();
        if (test_method1 != null) {
            stmt.bindString(55, test_method1);
        }
 
        String test_method2 = entity.getTest_method2();
        if (test_method2 != null) {
            stmt.bindString(56, test_method2);
        }
 
        String test_method3 = entity.getTest_method3();
        if (test_method3 != null) {
            stmt.bindString(57, test_method3);
        }
 
        String unique_testproject1 = entity.getUnique_testproject1();
        if (unique_testproject1 != null) {
            stmt.bindString(58, unique_testproject1);
        }
 
        String unique_testproject2 = entity.getUnique_testproject2();
        if (unique_testproject2 != null) {
            stmt.bindString(59, unique_testproject2);
        }
 
        String unique_testproject3 = entity.getUnique_testproject3();
        if (unique_testproject3 != null) {
            stmt.bindString(60, unique_testproject3);
        }
 
        String testresult1 = entity.getTestresult1();
        if (testresult1 != null) {
            stmt.bindString(61, testresult1);
        }
 
        String testresult2 = entity.getTestresult2();
        if (testresult2 != null) {
            stmt.bindString(62, testresult2);
        }
 
        String testresult3 = entity.getTestresult3();
        if (testresult3 != null) {
            stmt.bindString(63, testresult3);
        }
 
        String decisionoutcome1 = entity.getDecisionoutcome1();
        if (decisionoutcome1 != null) {
            stmt.bindString(64, decisionoutcome1);
        }
 
        String decisionoutcome2 = entity.getDecisionoutcome2();
        if (decisionoutcome2 != null) {
            stmt.bindString(65, decisionoutcome2);
        }
 
        String decisionoutcome3 = entity.getDecisionoutcome3();
        if (decisionoutcome3 != null) {
            stmt.bindString(66, decisionoutcome3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TestRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sysCode = entity.getSysCode();
        if (sysCode != null) {
            stmt.bindString(2, sysCode);
        }
        stmt.bindLong(3, entity.getGallery());
 
        String samplenum = entity.getSamplenum();
        if (samplenum != null) {
            stmt.bindString(4, samplenum);
        }
 
        String samplename = entity.getSamplename();
        if (samplename != null) {
            stmt.bindString(5, samplename);
        }
 
        String sampletype = entity.getSampletype();
        if (sampletype != null) {
            stmt.bindString(6, sampletype);
        }
 
        String foodCode = entity.getFoodCode();
        if (foodCode != null) {
            stmt.bindString(7, foodCode);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(8, symbol);
        }
 
        String cov = entity.getCov();
        if (cov != null) {
            stmt.bindString(9, cov);
        }
 
        String cov_unit = entity.getCov_unit();
        if (cov_unit != null) {
            stmt.bindString(10, cov_unit);
        }
 
        String stand_num = entity.getStand_num();
        if (stand_num != null) {
            stmt.bindString(11, stand_num);
        }
 
        String prosecutedunits = entity.getProsecutedunits();
        if (prosecutedunits != null) {
            stmt.bindString(12, prosecutedunits);
        }
 
        String prosecutedunits_adress = entity.getProsecutedunits_adress();
        if (prosecutedunits_adress != null) {
            stmt.bindString(13, prosecutedunits_adress);
        }
        stmt.bindDouble(14, entity.getDilutionratio());
        stmt.bindDouble(15, entity.getEveryresponse());
 
        String controlvalue = entity.getControlvalue();
        if (controlvalue != null) {
            stmt.bindString(16, controlvalue);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(17, serialNumber);
        }
 
        String testresult = entity.getTestresult();
        if (testresult != null) {
            stmt.bindString(18, testresult);
        }
 
        String decisionoutcome = entity.getDecisionoutcome();
        if (decisionoutcome != null) {
            stmt.bindString(19, decisionoutcome);
        }
 
        String inspector = entity.getInspector();
        if (inspector != null) {
            stmt.bindString(20, inspector);
        }
 
        Long testingtime = entity.getTestingtime();
        if (testingtime != null) {
            stmt.bindLong(21, testingtime);
        }
        stmt.bindDouble(22, entity.getLongitude());
        stmt.bindDouble(23, entity.getLatitude());
 
        String testsite = entity.getTestsite();
        if (testsite != null) {
            stmt.bindString(24, testsite);
        }
 
        String test_method = entity.getTest_method();
        if (test_method != null) {
            stmt.bindString(25, test_method);
        }
 
        String test_project = entity.getTest_project();
        if (test_project != null) {
            stmt.bindString(26, test_project);
        }
 
        String test_moudle = entity.getTest_moudle();
        if (test_moudle != null) {
            stmt.bindString(27, test_moudle);
        }
 
        String planName = entity.getPlanName();
        if (planName != null) {
            stmt.bindString(28, planName);
        }
        stmt.bindLong(29, entity.getIsupload());
 
        String unique_sample = entity.getUnique_sample();
        if (unique_sample != null) {
            stmt.bindString(30, unique_sample);
        }
 
        String unique_method = entity.getUnique_method();
        if (unique_method != null) {
            stmt.bindString(31, unique_method);
        }
 
        String unique_testproject = entity.getUnique_testproject();
        if (unique_testproject != null) {
            stmt.bindString(32, unique_testproject);
        }
 
        String unique_beunit = entity.getUnique_beunit();
        if (unique_beunit != null) {
            stmt.bindString(33, unique_beunit);
        }
 
        String unique_task = entity.getUnique_task();
        if (unique_task != null) {
            stmt.bindString(34, unique_task);
        }
 
        String platform_tag = entity.getPlatform_tag();
        if (platform_tag != null) {
            stmt.bindString(35, platform_tag);
        }
 
        String test_unit_id = entity.getTest_unit_id();
        if (test_unit_id != null) {
            stmt.bindString(36, test_unit_id);
        }
 
        String test_unit_name = entity.getTest_unit_name();
        if (test_unit_name != null) {
            stmt.bindString(37, test_unit_name);
        }
 
        String test_unit_reserved = entity.getTest_unit_reserved();
        if (test_unit_reserved != null) {
            stmt.bindString(38, test_unit_reserved);
        }
 
        String sampleplace = entity.getSampleplace();
        if (sampleplace != null) {
            stmt.bindString(39, sampleplace);
        }
        stmt.bindLong(40, entity.getRetest());
 
        String parentSysCode = entity.getParentSysCode();
        if (parentSysCode != null) {
            stmt.bindString(41, parentSysCode);
        }
 
        String reservedfield1 = entity.getReservedfield1();
        if (reservedfield1 != null) {
            stmt.bindString(42, reservedfield1);
        }
 
        String reservedfield2 = entity.getReservedfield2();
        if (reservedfield2 != null) {
            stmt.bindString(43, reservedfield2);
        }
 
        String reservedfield3 = entity.getReservedfield3();
        if (reservedfield3 != null) {
            stmt.bindString(44, reservedfield3);
        }
 
        String reservedfield4 = entity.getReservedfield4();
        if (reservedfield4 != null) {
            stmt.bindString(45, reservedfield4);
        }
 
        String reservedfield5 = entity.getReservedfield5();
        if (reservedfield5 != null) {
            stmt.bindString(46, reservedfield5);
        }
 
        String reservedfield6 = entity.getReservedfield6();
        if (reservedfield6 != null) {
            stmt.bindString(47, reservedfield6);
        }
 
        String reservedfield7 = entity.getReservedfield7();
        if (reservedfield7 != null) {
            stmt.bindString(48, reservedfield7);
        }
 
        String reservedfield8 = entity.getReservedfield8();
        if (reservedfield8 != null) {
            stmt.bindString(49, reservedfield8);
        }
 
        String reservedfield9 = entity.getReservedfield9();
        if (reservedfield9 != null) {
            stmt.bindString(50, reservedfield9);
        }
 
        String reservedfield10 = entity.getReservedfield10();
        if (reservedfield10 != null) {
            stmt.bindString(51, reservedfield10);
        }
 
        String test_project1 = entity.getTest_project1();
        if (test_project1 != null) {
            stmt.bindString(52, test_project1);
        }
 
        String test_project2 = entity.getTest_project2();
        if (test_project2 != null) {
            stmt.bindString(53, test_project2);
        }
 
        String test_project3 = entity.getTest_project3();
        if (test_project3 != null) {
            stmt.bindString(54, test_project3);
        }
 
        String test_method1 = entity.getTest_method1();
        if (test_method1 != null) {
            stmt.bindString(55, test_method1);
        }
 
        String test_method2 = entity.getTest_method2();
        if (test_method2 != null) {
            stmt.bindString(56, test_method2);
        }
 
        String test_method3 = entity.getTest_method3();
        if (test_method3 != null) {
            stmt.bindString(57, test_method3);
        }
 
        String unique_testproject1 = entity.getUnique_testproject1();
        if (unique_testproject1 != null) {
            stmt.bindString(58, unique_testproject1);
        }
 
        String unique_testproject2 = entity.getUnique_testproject2();
        if (unique_testproject2 != null) {
            stmt.bindString(59, unique_testproject2);
        }
 
        String unique_testproject3 = entity.getUnique_testproject3();
        if (unique_testproject3 != null) {
            stmt.bindString(60, unique_testproject3);
        }
 
        String testresult1 = entity.getTestresult1();
        if (testresult1 != null) {
            stmt.bindString(61, testresult1);
        }
 
        String testresult2 = entity.getTestresult2();
        if (testresult2 != null) {
            stmt.bindString(62, testresult2);
        }
 
        String testresult3 = entity.getTestresult3();
        if (testresult3 != null) {
            stmt.bindString(63, testresult3);
        }
 
        String decisionoutcome1 = entity.getDecisionoutcome1();
        if (decisionoutcome1 != null) {
            stmt.bindString(64, decisionoutcome1);
        }
 
        String decisionoutcome2 = entity.getDecisionoutcome2();
        if (decisionoutcome2 != null) {
            stmt.bindString(65, decisionoutcome2);
        }
 
        String decisionoutcome3 = entity.getDecisionoutcome3();
        if (decisionoutcome3 != null) {
            stmt.bindString(66, decisionoutcome3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TestRecord readEntity(Cursor cursor, int offset) {
        TestRecord entity = new TestRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sysCode
            cursor.getInt(offset + 2), // gallery
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // samplenum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // samplename
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sampletype
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // foodCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // symbol
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cov
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cov_unit
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // stand_num
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // prosecutedunits
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // prosecutedunits_adress
            cursor.getDouble(offset + 13), // dilutionratio
            cursor.getDouble(offset + 14), // everyresponse
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // controlvalue
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // serialNumber
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // testresult
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // decisionoutcome
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // inspector
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // testingtime
            cursor.getDouble(offset + 21), // longitude
            cursor.getDouble(offset + 22), // latitude
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // testsite
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // test_method
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // test_project
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // test_moudle
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // planName
            cursor.getInt(offset + 28), // isupload
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // unique_sample
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // unique_method
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // unique_testproject
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // unique_beunit
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // unique_task
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // platform_tag
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // test_unit_id
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // test_unit_name
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // test_unit_reserved
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // sampleplace
            cursor.getInt(offset + 39), // retest
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // parentSysCode
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // reservedfield1
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // reservedfield2
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // reservedfield3
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // reservedfield4
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // reservedfield5
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // reservedfield6
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // reservedfield7
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // reservedfield8
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // reservedfield9
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // reservedfield10
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // test_project1
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // test_project2
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // test_project3
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // test_method1
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // test_method2
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // test_method3
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // unique_testproject1
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // unique_testproject2
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // unique_testproject3
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // testresult1
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // testresult2
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // testresult3
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // decisionoutcome1
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // decisionoutcome2
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65) // decisionoutcome3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TestRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGallery(cursor.getInt(offset + 2));
        entity.setSamplenum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSamplename(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSampletype(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFoodCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSymbol(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCov(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCov_unit(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStand_num(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProsecutedunits(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProsecutedunits_adress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDilutionratio(cursor.getDouble(offset + 13));
        entity.setEveryresponse(cursor.getDouble(offset + 14));
        entity.setControlvalue(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSerialNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTestresult(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDecisionoutcome(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setInspector(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTestingtime(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setLongitude(cursor.getDouble(offset + 21));
        entity.setLatitude(cursor.getDouble(offset + 22));
        entity.setTestsite(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTest_method(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTest_project(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTest_moudle(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPlanName(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setIsupload(cursor.getInt(offset + 28));
        entity.setUnique_sample(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setUnique_method(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setUnique_testproject(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setUnique_beunit(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setUnique_task(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setPlatform_tag(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTest_unit_id(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTest_unit_name(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setTest_unit_reserved(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setSampleplace(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setRetest(cursor.getInt(offset + 39));
        entity.setParentSysCode(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setReservedfield1(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setReservedfield2(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setReservedfield3(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setReservedfield4(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setReservedfield5(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setReservedfield6(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setReservedfield7(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setReservedfield8(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setReservedfield9(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setReservedfield10(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setTest_project1(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setTest_project2(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setTest_project3(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setTest_method1(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setTest_method2(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setTest_method3(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setUnique_testproject1(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setUnique_testproject2(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setUnique_testproject3(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setTestresult1(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setTestresult2(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setTestresult3(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setDecisionoutcome1(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setDecisionoutcome2(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setDecisionoutcome3(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TestRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TestRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TestRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
