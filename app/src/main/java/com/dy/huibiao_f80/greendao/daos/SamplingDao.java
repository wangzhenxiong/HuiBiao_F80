package com.dy.huibiao_f80.greendao.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dy.huibiao_f80.greendao.Sampling;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLING".
*/
public class SamplingDao extends AbstractDao<Sampling, Long> {

    public static final String TABLENAME = "SAMPLING";

    /**
     * Properties of entity Sampling.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SamplingNumber = new Property(1, String.class, "SamplingNumber", false, "SAMPLING_NUMBER");
        public final static Property SamplingName = new Property(2, String.class, "SamplingName", false, "SAMPLING_NAME");
        public final static Property UnitDetected = new Property(3, String.class, "unitDetected", false, "UNIT_DETECTED");
        public final static Property TestingUnit = new Property(4, String.class, "testingUnit", false, "TESTING_UNIT");
        public final static Property CreationTime = new Property(5, Long.class, "creationTime", false, "CREATION_TIME");
        public final static Property TestingTime = new Property(6, Long.class, "testingTime", false, "TESTING_TIME");
        public final static Property TestResult = new Property(7, String.class, "testResult", false, "TEST_RESULT");
    }


    public SamplingDao(DaoConfig config) {
        super(config);
    }
    
    public SamplingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SAMPLING_NUMBER\" TEXT," + // 1: SamplingNumber
                "\"SAMPLING_NAME\" TEXT," + // 2: SamplingName
                "\"UNIT_DETECTED\" TEXT," + // 3: unitDetected
                "\"TESTING_UNIT\" TEXT," + // 4: testingUnit
                "\"CREATION_TIME\" INTEGER," + // 5: creationTime
                "\"TESTING_TIME\" INTEGER," + // 6: testingTime
                "\"TEST_RESULT\" TEXT);"); // 7: testResult
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sampling entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SamplingNumber = entity.getSamplingNumber();
        if (SamplingNumber != null) {
            stmt.bindString(2, SamplingNumber);
        }
 
        String SamplingName = entity.getSamplingName();
        if (SamplingName != null) {
            stmt.bindString(3, SamplingName);
        }
 
        String unitDetected = entity.getUnitDetected();
        if (unitDetected != null) {
            stmt.bindString(4, unitDetected);
        }
 
        String testingUnit = entity.getTestingUnit();
        if (testingUnit != null) {
            stmt.bindString(5, testingUnit);
        }
 
        Long creationTime = entity.getCreationTime();
        if (creationTime != null) {
            stmt.bindLong(6, creationTime);
        }
 
        Long testingTime = entity.getTestingTime();
        if (testingTime != null) {
            stmt.bindLong(7, testingTime);
        }
 
        String testResult = entity.getTestResult();
        if (testResult != null) {
            stmt.bindString(8, testResult);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sampling entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SamplingNumber = entity.getSamplingNumber();
        if (SamplingNumber != null) {
            stmt.bindString(2, SamplingNumber);
        }
 
        String SamplingName = entity.getSamplingName();
        if (SamplingName != null) {
            stmt.bindString(3, SamplingName);
        }
 
        String unitDetected = entity.getUnitDetected();
        if (unitDetected != null) {
            stmt.bindString(4, unitDetected);
        }
 
        String testingUnit = entity.getTestingUnit();
        if (testingUnit != null) {
            stmt.bindString(5, testingUnit);
        }
 
        Long creationTime = entity.getCreationTime();
        if (creationTime != null) {
            stmt.bindLong(6, creationTime);
        }
 
        Long testingTime = entity.getTestingTime();
        if (testingTime != null) {
            stmt.bindLong(7, testingTime);
        }
 
        String testResult = entity.getTestResult();
        if (testResult != null) {
            stmt.bindString(8, testResult);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sampling readEntity(Cursor cursor, int offset) {
        Sampling entity = new Sampling( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SamplingNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SamplingName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // unitDetected
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // testingUnit
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // creationTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // testingTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // testResult
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sampling entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSamplingNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSamplingName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnitDetected(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTestingUnit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreationTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTestingTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setTestResult(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sampling entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sampling entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sampling entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
