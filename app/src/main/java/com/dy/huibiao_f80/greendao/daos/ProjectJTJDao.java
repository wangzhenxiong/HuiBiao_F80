package com.dy.huibiao_f80.greendao.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dy.huibiao_f80.greendao.ProjectJTJ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_JTJ".
*/
public class ProjectJTJDao extends AbstractDao<ProjectJTJ, Long> {

    public static final String TABLENAME = "PROJECT_JTJ";

    /**
     * Properties of entity ProjectJTJ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectName = new Property(1, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property CurveName = new Property(2, String.class, "curveName", false, "CURVE_NAME");
        public final static Property Isdefault = new Property(3, boolean.class, "isdefault", false, "ISDEFAULT");
        public final static Property StandardName = new Property(4, String.class, "standardName", false, "STANDARD_NAME");
        public final static Property TestMethod = new Property(5, int.class, "testMethod", false, "TEST_METHOD");
        public final static Property C1 = new Property(6, double.class, "c1", false, "C1");
        public final static Property T1A = new Property(7, double.class, "t1A", false, "T1_A");
        public final static Property T1B = new Property(8, double.class, "t1B", false, "T1_B");
        public final static Property C1_t1A = new Property(9, double.class, "c1_t1A", false, "C1_T1_A");
        public final static Property C1_t1B = new Property(10, double.class, "c1_t1B", false, "C1_T1_B");
        public final static Property TestTime = new Property(11, int.class, "testTime", false, "TEST_TIME");
        public final static Property Version = new Property(12, String.class, "version", false, "VERSION");
    }


    public ProjectJTJDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectJTJDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_JTJ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_NAME\" TEXT," + // 1: projectName
                "\"CURVE_NAME\" TEXT," + // 2: curveName
                "\"ISDEFAULT\" INTEGER NOT NULL ," + // 3: isdefault
                "\"STANDARD_NAME\" TEXT," + // 4: standardName
                "\"TEST_METHOD\" INTEGER NOT NULL ," + // 5: testMethod
                "\"C1\" REAL NOT NULL ," + // 6: c1
                "\"T1_A\" REAL NOT NULL ," + // 7: t1A
                "\"T1_B\" REAL NOT NULL ," + // 8: t1B
                "\"C1_T1_A\" REAL NOT NULL ," + // 9: c1_t1A
                "\"C1_T1_B\" REAL NOT NULL ," + // 10: c1_t1B
                "\"TEST_TIME\" INTEGER NOT NULL ," + // 11: testTime
                "\"VERSION\" TEXT);"); // 12: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_JTJ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectJTJ entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String curveName = entity.getCurveName();
        if (curveName != null) {
            stmt.bindString(3, curveName);
        }
        stmt.bindLong(4, entity.getIsdefault() ? 1L: 0L);
 
        String standardName = entity.getStandardName();
        if (standardName != null) {
            stmt.bindString(5, standardName);
        }
        stmt.bindLong(6, entity.getTestMethod());
        stmt.bindDouble(7, entity.getC1());
        stmt.bindDouble(8, entity.getT1A());
        stmt.bindDouble(9, entity.getT1B());
        stmt.bindDouble(10, entity.getC1_t1A());
        stmt.bindDouble(11, entity.getC1_t1B());
        stmt.bindLong(12, entity.getTestTime());
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(13, version);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectJTJ entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String curveName = entity.getCurveName();
        if (curveName != null) {
            stmt.bindString(3, curveName);
        }
        stmt.bindLong(4, entity.getIsdefault() ? 1L: 0L);
 
        String standardName = entity.getStandardName();
        if (standardName != null) {
            stmt.bindString(5, standardName);
        }
        stmt.bindLong(6, entity.getTestMethod());
        stmt.bindDouble(7, entity.getC1());
        stmt.bindDouble(8, entity.getT1A());
        stmt.bindDouble(9, entity.getT1B());
        stmt.bindDouble(10, entity.getC1_t1A());
        stmt.bindDouble(11, entity.getC1_t1B());
        stmt.bindLong(12, entity.getTestTime());
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(13, version);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectJTJ readEntity(Cursor cursor, int offset) {
        ProjectJTJ entity = new ProjectJTJ( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // projectName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // curveName
            cursor.getShort(offset + 3) != 0, // isdefault
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // standardName
            cursor.getInt(offset + 5), // testMethod
            cursor.getDouble(offset + 6), // c1
            cursor.getDouble(offset + 7), // t1A
            cursor.getDouble(offset + 8), // t1B
            cursor.getDouble(offset + 9), // c1_t1A
            cursor.getDouble(offset + 10), // c1_t1B
            cursor.getInt(offset + 11), // testTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectJTJ entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurveName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsdefault(cursor.getShort(offset + 3) != 0);
        entity.setStandardName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTestMethod(cursor.getInt(offset + 5));
        entity.setC1(cursor.getDouble(offset + 6));
        entity.setT1A(cursor.getDouble(offset + 7));
        entity.setT1B(cursor.getDouble(offset + 8));
        entity.setC1_t1A(cursor.getDouble(offset + 9));
        entity.setC1_t1B(cursor.getDouble(offset + 10));
        entity.setTestTime(cursor.getInt(offset + 11));
        entity.setVersion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectJTJ entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectJTJ entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectJTJ entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
