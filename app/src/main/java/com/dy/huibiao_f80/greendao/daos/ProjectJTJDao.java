package com.dy.huibiao_f80.greendao.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dy.huibiao_f80.greendao.ProjectJTJ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_JTJ".
*/
public class ProjectJTJDao extends AbstractDao<ProjectJTJ, Long> {

    public static final String TABLENAME = "PROJECT_JTJ";

    /**
     * Properties of entity ProjectJTJ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectName = new Property(1, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property CurveName = new Property(2, String.class, "curveName", false, "CURVE_NAME");
        public final static Property CurveOrder = new Property(3, int.class, "curveOrder", false, "CURVE_ORDER");
        public final static Property Isdefault = new Property(4, boolean.class, "isdefault", false, "ISDEFAULT");
        public final static Property StandardName = new Property(5, String.class, "standardName", false, "STANDARD_NAME");
        public final static Property TestMethod = new Property(6, int.class, "testMethod", false, "TEST_METHOD");
        public final static Property C = new Property(7, double.class, "c", false, "C");
        public final static Property TA = new Property(8, double.class, "tA", false, "T_A");
        public final static Property TB = new Property(9, double.class, "tB", false, "T_B");
        public final static Property C_tA = new Property(10, double.class, "c_tA", false, "C_T_A");
        public final static Property C_tB = new Property(11, double.class, "c_tB", false, "C_T_B");
        public final static Property TestTime = new Property(12, int.class, "testTime", false, "TEST_TIME");
        public final static Property Tips = new Property(13, String.class, "tips", false, "TIPS");
        public final static Property DetectionLimit = new Property(14, String.class, "detectionLimit", false, "DETECTION_LIMIT");
        public final static Property FinishState = new Property(15, boolean.class, "finishState", false, "FINISH_STATE");
    }


    public ProjectJTJDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectJTJDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_JTJ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_NAME\" TEXT," + // 1: projectName
                "\"CURVE_NAME\" TEXT," + // 2: curveName
                "\"CURVE_ORDER\" INTEGER NOT NULL ," + // 3: curveOrder
                "\"ISDEFAULT\" INTEGER NOT NULL ," + // 4: isdefault
                "\"STANDARD_NAME\" TEXT," + // 5: standardName
                "\"TEST_METHOD\" INTEGER NOT NULL ," + // 6: testMethod
                "\"C\" REAL NOT NULL ," + // 7: c
                "\"T_A\" REAL NOT NULL ," + // 8: tA
                "\"T_B\" REAL NOT NULL ," + // 9: tB
                "\"C_T_A\" REAL NOT NULL ," + // 10: c_tA
                "\"C_T_B\" REAL NOT NULL ," + // 11: c_tB
                "\"TEST_TIME\" INTEGER NOT NULL ," + // 12: testTime
                "\"TIPS\" TEXT," + // 13: tips
                "\"DETECTION_LIMIT\" TEXT," + // 14: detectionLimit
                "\"FINISH_STATE\" INTEGER NOT NULL );"); // 15: finishState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_JTJ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectJTJ entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String curveName = entity.getCurveName();
        if (curveName != null) {
            stmt.bindString(3, curveName);
        }
        stmt.bindLong(4, entity.getCurveOrder());
        stmt.bindLong(5, entity.getIsdefault() ? 1L: 0L);
 
        String standardName = entity.getStandardName();
        if (standardName != null) {
            stmt.bindString(6, standardName);
        }
        stmt.bindLong(7, entity.getTestMethod());
        stmt.bindDouble(8, entity.getC());
        stmt.bindDouble(9, entity.getTA());
        stmt.bindDouble(10, entity.getTB());
        stmt.bindDouble(11, entity.getC_tA());
        stmt.bindDouble(12, entity.getC_tB());
        stmt.bindLong(13, entity.getTestTime());
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(14, tips);
        }
 
        String detectionLimit = entity.getDetectionLimit();
        if (detectionLimit != null) {
            stmt.bindString(15, detectionLimit);
        }
        stmt.bindLong(16, entity.getFinishState() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectJTJ entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String curveName = entity.getCurveName();
        if (curveName != null) {
            stmt.bindString(3, curveName);
        }
        stmt.bindLong(4, entity.getCurveOrder());
        stmt.bindLong(5, entity.getIsdefault() ? 1L: 0L);
 
        String standardName = entity.getStandardName();
        if (standardName != null) {
            stmt.bindString(6, standardName);
        }
        stmt.bindLong(7, entity.getTestMethod());
        stmt.bindDouble(8, entity.getC());
        stmt.bindDouble(9, entity.getTA());
        stmt.bindDouble(10, entity.getTB());
        stmt.bindDouble(11, entity.getC_tA());
        stmt.bindDouble(12, entity.getC_tB());
        stmt.bindLong(13, entity.getTestTime());
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(14, tips);
        }
 
        String detectionLimit = entity.getDetectionLimit();
        if (detectionLimit != null) {
            stmt.bindString(15, detectionLimit);
        }
        stmt.bindLong(16, entity.getFinishState() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectJTJ readEntity(Cursor cursor, int offset) {
        ProjectJTJ entity = new ProjectJTJ( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // projectName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // curveName
            cursor.getInt(offset + 3), // curveOrder
            cursor.getShort(offset + 4) != 0, // isdefault
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // standardName
            cursor.getInt(offset + 6), // testMethod
            cursor.getDouble(offset + 7), // c
            cursor.getDouble(offset + 8), // tA
            cursor.getDouble(offset + 9), // tB
            cursor.getDouble(offset + 10), // c_tA
            cursor.getDouble(offset + 11), // c_tB
            cursor.getInt(offset + 12), // testTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // tips
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // detectionLimit
            cursor.getShort(offset + 15) != 0 // finishState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectJTJ entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurveName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCurveOrder(cursor.getInt(offset + 3));
        entity.setIsdefault(cursor.getShort(offset + 4) != 0);
        entity.setStandardName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTestMethod(cursor.getInt(offset + 6));
        entity.setC(cursor.getDouble(offset + 7));
        entity.setTA(cursor.getDouble(offset + 8));
        entity.setTB(cursor.getDouble(offset + 9));
        entity.setC_tA(cursor.getDouble(offset + 10));
        entity.setC_tB(cursor.getDouble(offset + 11));
        entity.setTestTime(cursor.getInt(offset + 12));
        entity.setTips(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDetectionLimit(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFinishState(cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectJTJ entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectJTJ entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectJTJ entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
