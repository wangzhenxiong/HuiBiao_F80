package com.dy.huibiao_f80.greendao.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dy.huibiao_f80.greendao.ProjectFGGD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_FGGD".
*/
public class ProjectFGGDDao extends AbstractDao<ProjectFGGD, Long> {

    public static final String TABLENAME = "PROJECT_FGGD";

    /**
     * Properties of entity ProjectFGGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectName = new Property(1, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property CurveName = new Property(2, String.class, "curveName", false, "CURVE_NAME");
        public final static Property CurveOrder = new Property(3, int.class, "curveOrder", false, "CURVE_ORDER");
        public final static Property Isdefault = new Property(4, boolean.class, "isdefault", false, "ISDEFAULT");
        public final static Property StandardName = new Property(5, String.class, "standardName", false, "STANDARD_NAME");
        public final static Property Method = new Property(6, int.class, "method", false, "METHOD");
        public final static Property WaveLength = new Property(7, int.class, "waveLength", false, "WAVE_LENGTH");
        public final static Property WarmTime = new Property(8, int.class, "warmTime", false, "WARM_TIME");
        public final static Property TestTime = new Property(9, int.class, "testTime", false, "TEST_TIME");
        public final static Property ResultUnit = new Property(10, String.class, "resultUnit", false, "RESULT_UNIT");
        public final static Property ControValue = new Property(11, float.class, "controValue", false, "CONTRO_VALUE");
        public final static Property ControValueLastTime = new Property(12, String.class, "controValueLastTime", false, "CONTRO_VALUE_LAST_TIME");
        public final static Property A0 = new Property(13, double.class, "a0", false, "A0");
        public final static Property B0 = new Property(14, double.class, "b0", false, "B0");
        public final static Property C0 = new Property(15, double.class, "c0", false, "C0");
        public final static Property D0 = new Property(16, double.class, "d0", false, "D0");
        public final static Property From0 = new Property(17, double.class, "from0", false, "FROM0");
        public final static Property To0 = new Property(18, double.class, "to0", false, "TO0");
        public final static Property A1 = new Property(19, double.class, "a1", false, "A1");
        public final static Property B1 = new Property(20, double.class, "b1", false, "B1");
        public final static Property C1 = new Property(21, double.class, "c1", false, "C1");
        public final static Property D1 = new Property(22, double.class, "d1", false, "D1");
        public final static Property From1 = new Property(23, double.class, "from1", false, "FROM1");
        public final static Property To1 = new Property(24, double.class, "to1", false, "TO1");
        public final static Property A = new Property(25, double.class, "a", false, "A");
        public final static Property B = new Property(26, double.class, "b", false, "B");
        public final static Property C = new Property(27, double.class, "c", false, "C");
        public final static Property D = new Property(28, double.class, "d", false, "D");
        public final static Property User_yin = new Property(29, boolean.class, "user_yin", false, "USER_YIN");
        public final static Property Yin_a = new Property(30, double.class, "yin_a", false, "YIN_A");
        public final static Property Yin_a_symbol = new Property(31, String.class, "yin_a_symbol", false, "YIN_A_SYMBOL");
        public final static Property Yin_b = new Property(32, double.class, "yin_b", false, "YIN_B");
        public final static Property Yin_b_symbol = new Property(33, String.class, "yin_b_symbol", false, "YIN_B_SYMBOL");
        public final static Property User_yang = new Property(34, boolean.class, "user_yang", false, "USER_YANG");
        public final static Property Yang_a = new Property(35, double.class, "yang_a", false, "YANG_A");
        public final static Property Yang_a_symbol = new Property(36, String.class, "yang_a_symbol", false, "YANG_A_SYMBOL");
        public final static Property Yang_b = new Property(37, double.class, "yang_b", false, "YANG_B");
        public final static Property Yang_b_symbol = new Property(38, String.class, "yang_b_symbol", false, "YANG_B_SYMBOL");
        public final static Property User_keyi = new Property(39, boolean.class, "user_keyi", false, "USER_KEYI");
        public final static Property Keyi_a = new Property(40, double.class, "keyi_a", false, "KEYI_A");
        public final static Property Keyi_a_symbol = new Property(41, String.class, "keyi_a_symbol", false, "KEYI_A_SYMBOL");
        public final static Property Keyi_b = new Property(42, double.class, "keyi_b", false, "KEYI_B");
        public final static Property Keyi_b_symbol = new Property(43, String.class, "keyi_b_symbol", false, "KEYI_B_SYMBOL");
        public final static Property Tips = new Property(44, String.class, "tips", false, "TIPS");
        public final static Property DetectionLimit = new Property(45, String.class, "detectionLimit", false, "DETECTION_LIMIT");
        public final static Property FinishState = new Property(46, boolean.class, "finishState", false, "FINISH_STATE");
        public final static Property Creator = new Property(47, int.class, "creator", false, "CREATOR");
    }


    public ProjectFGGDDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectFGGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_FGGD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_NAME\" TEXT," + // 1: projectName
                "\"CURVE_NAME\" TEXT," + // 2: curveName
                "\"CURVE_ORDER\" INTEGER NOT NULL ," + // 3: curveOrder
                "\"ISDEFAULT\" INTEGER NOT NULL ," + // 4: isdefault
                "\"STANDARD_NAME\" TEXT," + // 5: standardName
                "\"METHOD\" INTEGER NOT NULL ," + // 6: method
                "\"WAVE_LENGTH\" INTEGER NOT NULL ," + // 7: waveLength
                "\"WARM_TIME\" INTEGER NOT NULL ," + // 8: warmTime
                "\"TEST_TIME\" INTEGER NOT NULL ," + // 9: testTime
                "\"RESULT_UNIT\" TEXT," + // 10: resultUnit
                "\"CONTRO_VALUE\" REAL NOT NULL ," + // 11: controValue
                "\"CONTRO_VALUE_LAST_TIME\" TEXT," + // 12: controValueLastTime
                "\"A0\" REAL NOT NULL ," + // 13: a0
                "\"B0\" REAL NOT NULL ," + // 14: b0
                "\"C0\" REAL NOT NULL ," + // 15: c0
                "\"D0\" REAL NOT NULL ," + // 16: d0
                "\"FROM0\" REAL NOT NULL ," + // 17: from0
                "\"TO0\" REAL NOT NULL ," + // 18: to0
                "\"A1\" REAL NOT NULL ," + // 19: a1
                "\"B1\" REAL NOT NULL ," + // 20: b1
                "\"C1\" REAL NOT NULL ," + // 21: c1
                "\"D1\" REAL NOT NULL ," + // 22: d1
                "\"FROM1\" REAL NOT NULL ," + // 23: from1
                "\"TO1\" REAL NOT NULL ," + // 24: to1
                "\"A\" REAL NOT NULL ," + // 25: a
                "\"B\" REAL NOT NULL ," + // 26: b
                "\"C\" REAL NOT NULL ," + // 27: c
                "\"D\" REAL NOT NULL ," + // 28: d
                "\"USER_YIN\" INTEGER NOT NULL ," + // 29: user_yin
                "\"YIN_A\" REAL NOT NULL ," + // 30: yin_a
                "\"YIN_A_SYMBOL\" TEXT," + // 31: yin_a_symbol
                "\"YIN_B\" REAL NOT NULL ," + // 32: yin_b
                "\"YIN_B_SYMBOL\" TEXT," + // 33: yin_b_symbol
                "\"USER_YANG\" INTEGER NOT NULL ," + // 34: user_yang
                "\"YANG_A\" REAL NOT NULL ," + // 35: yang_a
                "\"YANG_A_SYMBOL\" TEXT," + // 36: yang_a_symbol
                "\"YANG_B\" REAL NOT NULL ," + // 37: yang_b
                "\"YANG_B_SYMBOL\" TEXT," + // 38: yang_b_symbol
                "\"USER_KEYI\" INTEGER NOT NULL ," + // 39: user_keyi
                "\"KEYI_A\" REAL NOT NULL ," + // 40: keyi_a
                "\"KEYI_A_SYMBOL\" TEXT," + // 41: keyi_a_symbol
                "\"KEYI_B\" REAL NOT NULL ," + // 42: keyi_b
                "\"KEYI_B_SYMBOL\" TEXT," + // 43: keyi_b_symbol
                "\"TIPS\" TEXT," + // 44: tips
                "\"DETECTION_LIMIT\" TEXT," + // 45: detectionLimit
                "\"FINISH_STATE\" INTEGER NOT NULL ," + // 46: finishState
                "\"CREATOR\" INTEGER NOT NULL );"); // 47: creator
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_FGGD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectFGGD entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String curveName = entity.getCurveName();
        if (curveName != null) {
            stmt.bindString(3, curveName);
        }
        stmt.bindLong(4, entity.getCurveOrder());
        stmt.bindLong(5, entity.getIsdefault() ? 1L: 0L);
 
        String standardName = entity.getStandardName();
        if (standardName != null) {
            stmt.bindString(6, standardName);
        }
        stmt.bindLong(7, entity.getMethod());
        stmt.bindLong(8, entity.getWaveLength());
        stmt.bindLong(9, entity.getWarmTime());
        stmt.bindLong(10, entity.getTestTime());
 
        String resultUnit = entity.getResultUnit();
        if (resultUnit != null) {
            stmt.bindString(11, resultUnit);
        }
        stmt.bindDouble(12, entity.getControValue());
 
        String controValueLastTime = entity.getControValueLastTime();
        if (controValueLastTime != null) {
            stmt.bindString(13, controValueLastTime);
        }
        stmt.bindDouble(14, entity.getA0());
        stmt.bindDouble(15, entity.getB0());
        stmt.bindDouble(16, entity.getC0());
        stmt.bindDouble(17, entity.getD0());
        stmt.bindDouble(18, entity.getFrom0());
        stmt.bindDouble(19, entity.getTo0());
        stmt.bindDouble(20, entity.getA1());
        stmt.bindDouble(21, entity.getB1());
        stmt.bindDouble(22, entity.getC1());
        stmt.bindDouble(23, entity.getD1());
        stmt.bindDouble(24, entity.getFrom1());
        stmt.bindDouble(25, entity.getTo1());
        stmt.bindDouble(26, entity.getA());
        stmt.bindDouble(27, entity.getB());
        stmt.bindDouble(28, entity.getC());
        stmt.bindDouble(29, entity.getD());
        stmt.bindLong(30, entity.getUser_yin() ? 1L: 0L);
        stmt.bindDouble(31, entity.getYin_a());
 
        String yin_a_symbol = entity.getYin_a_symbol();
        if (yin_a_symbol != null) {
            stmt.bindString(32, yin_a_symbol);
        }
        stmt.bindDouble(33, entity.getYin_b());
 
        String yin_b_symbol = entity.getYin_b_symbol();
        if (yin_b_symbol != null) {
            stmt.bindString(34, yin_b_symbol);
        }
        stmt.bindLong(35, entity.getUser_yang() ? 1L: 0L);
        stmt.bindDouble(36, entity.getYang_a());
 
        String yang_a_symbol = entity.getYang_a_symbol();
        if (yang_a_symbol != null) {
            stmt.bindString(37, yang_a_symbol);
        }
        stmt.bindDouble(38, entity.getYang_b());
 
        String yang_b_symbol = entity.getYang_b_symbol();
        if (yang_b_symbol != null) {
            stmt.bindString(39, yang_b_symbol);
        }
        stmt.bindLong(40, entity.getUser_keyi() ? 1L: 0L);
        stmt.bindDouble(41, entity.getKeyi_a());
 
        String keyi_a_symbol = entity.getKeyi_a_symbol();
        if (keyi_a_symbol != null) {
            stmt.bindString(42, keyi_a_symbol);
        }
        stmt.bindDouble(43, entity.getKeyi_b());
 
        String keyi_b_symbol = entity.getKeyi_b_symbol();
        if (keyi_b_symbol != null) {
            stmt.bindString(44, keyi_b_symbol);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(45, tips);
        }
 
        String detectionLimit = entity.getDetectionLimit();
        if (detectionLimit != null) {
            stmt.bindString(46, detectionLimit);
        }
        stmt.bindLong(47, entity.getFinishState() ? 1L: 0L);
        stmt.bindLong(48, entity.getCreator());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectFGGD entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String curveName = entity.getCurveName();
        if (curveName != null) {
            stmt.bindString(3, curveName);
        }
        stmt.bindLong(4, entity.getCurveOrder());
        stmt.bindLong(5, entity.getIsdefault() ? 1L: 0L);
 
        String standardName = entity.getStandardName();
        if (standardName != null) {
            stmt.bindString(6, standardName);
        }
        stmt.bindLong(7, entity.getMethod());
        stmt.bindLong(8, entity.getWaveLength());
        stmt.bindLong(9, entity.getWarmTime());
        stmt.bindLong(10, entity.getTestTime());
 
        String resultUnit = entity.getResultUnit();
        if (resultUnit != null) {
            stmt.bindString(11, resultUnit);
        }
        stmt.bindDouble(12, entity.getControValue());
 
        String controValueLastTime = entity.getControValueLastTime();
        if (controValueLastTime != null) {
            stmt.bindString(13, controValueLastTime);
        }
        stmt.bindDouble(14, entity.getA0());
        stmt.bindDouble(15, entity.getB0());
        stmt.bindDouble(16, entity.getC0());
        stmt.bindDouble(17, entity.getD0());
        stmt.bindDouble(18, entity.getFrom0());
        stmt.bindDouble(19, entity.getTo0());
        stmt.bindDouble(20, entity.getA1());
        stmt.bindDouble(21, entity.getB1());
        stmt.bindDouble(22, entity.getC1());
        stmt.bindDouble(23, entity.getD1());
        stmt.bindDouble(24, entity.getFrom1());
        stmt.bindDouble(25, entity.getTo1());
        stmt.bindDouble(26, entity.getA());
        stmt.bindDouble(27, entity.getB());
        stmt.bindDouble(28, entity.getC());
        stmt.bindDouble(29, entity.getD());
        stmt.bindLong(30, entity.getUser_yin() ? 1L: 0L);
        stmt.bindDouble(31, entity.getYin_a());
 
        String yin_a_symbol = entity.getYin_a_symbol();
        if (yin_a_symbol != null) {
            stmt.bindString(32, yin_a_symbol);
        }
        stmt.bindDouble(33, entity.getYin_b());
 
        String yin_b_symbol = entity.getYin_b_symbol();
        if (yin_b_symbol != null) {
            stmt.bindString(34, yin_b_symbol);
        }
        stmt.bindLong(35, entity.getUser_yang() ? 1L: 0L);
        stmt.bindDouble(36, entity.getYang_a());
 
        String yang_a_symbol = entity.getYang_a_symbol();
        if (yang_a_symbol != null) {
            stmt.bindString(37, yang_a_symbol);
        }
        stmt.bindDouble(38, entity.getYang_b());
 
        String yang_b_symbol = entity.getYang_b_symbol();
        if (yang_b_symbol != null) {
            stmt.bindString(39, yang_b_symbol);
        }
        stmt.bindLong(40, entity.getUser_keyi() ? 1L: 0L);
        stmt.bindDouble(41, entity.getKeyi_a());
 
        String keyi_a_symbol = entity.getKeyi_a_symbol();
        if (keyi_a_symbol != null) {
            stmt.bindString(42, keyi_a_symbol);
        }
        stmt.bindDouble(43, entity.getKeyi_b());
 
        String keyi_b_symbol = entity.getKeyi_b_symbol();
        if (keyi_b_symbol != null) {
            stmt.bindString(44, keyi_b_symbol);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(45, tips);
        }
 
        String detectionLimit = entity.getDetectionLimit();
        if (detectionLimit != null) {
            stmt.bindString(46, detectionLimit);
        }
        stmt.bindLong(47, entity.getFinishState() ? 1L: 0L);
        stmt.bindLong(48, entity.getCreator());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectFGGD readEntity(Cursor cursor, int offset) {
        ProjectFGGD entity = new ProjectFGGD( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // projectName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // curveName
            cursor.getInt(offset + 3), // curveOrder
            cursor.getShort(offset + 4) != 0, // isdefault
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // standardName
            cursor.getInt(offset + 6), // method
            cursor.getInt(offset + 7), // waveLength
            cursor.getInt(offset + 8), // warmTime
            cursor.getInt(offset + 9), // testTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // resultUnit
            cursor.getFloat(offset + 11), // controValue
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // controValueLastTime
            cursor.getDouble(offset + 13), // a0
            cursor.getDouble(offset + 14), // b0
            cursor.getDouble(offset + 15), // c0
            cursor.getDouble(offset + 16), // d0
            cursor.getDouble(offset + 17), // from0
            cursor.getDouble(offset + 18), // to0
            cursor.getDouble(offset + 19), // a1
            cursor.getDouble(offset + 20), // b1
            cursor.getDouble(offset + 21), // c1
            cursor.getDouble(offset + 22), // d1
            cursor.getDouble(offset + 23), // from1
            cursor.getDouble(offset + 24), // to1
            cursor.getDouble(offset + 25), // a
            cursor.getDouble(offset + 26), // b
            cursor.getDouble(offset + 27), // c
            cursor.getDouble(offset + 28), // d
            cursor.getShort(offset + 29) != 0, // user_yin
            cursor.getDouble(offset + 30), // yin_a
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // yin_a_symbol
            cursor.getDouble(offset + 32), // yin_b
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // yin_b_symbol
            cursor.getShort(offset + 34) != 0, // user_yang
            cursor.getDouble(offset + 35), // yang_a
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // yang_a_symbol
            cursor.getDouble(offset + 37), // yang_b
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // yang_b_symbol
            cursor.getShort(offset + 39) != 0, // user_keyi
            cursor.getDouble(offset + 40), // keyi_a
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // keyi_a_symbol
            cursor.getDouble(offset + 42), // keyi_b
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // keyi_b_symbol
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // tips
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // detectionLimit
            cursor.getShort(offset + 46) != 0, // finishState
            cursor.getInt(offset + 47) // creator
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectFGGD entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurveName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCurveOrder(cursor.getInt(offset + 3));
        entity.setIsdefault(cursor.getShort(offset + 4) != 0);
        entity.setStandardName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMethod(cursor.getInt(offset + 6));
        entity.setWaveLength(cursor.getInt(offset + 7));
        entity.setWarmTime(cursor.getInt(offset + 8));
        entity.setTestTime(cursor.getInt(offset + 9));
        entity.setResultUnit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setControValue(cursor.getFloat(offset + 11));
        entity.setControValueLastTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setA0(cursor.getDouble(offset + 13));
        entity.setB0(cursor.getDouble(offset + 14));
        entity.setC0(cursor.getDouble(offset + 15));
        entity.setD0(cursor.getDouble(offset + 16));
        entity.setFrom0(cursor.getDouble(offset + 17));
        entity.setTo0(cursor.getDouble(offset + 18));
        entity.setA1(cursor.getDouble(offset + 19));
        entity.setB1(cursor.getDouble(offset + 20));
        entity.setC1(cursor.getDouble(offset + 21));
        entity.setD1(cursor.getDouble(offset + 22));
        entity.setFrom1(cursor.getDouble(offset + 23));
        entity.setTo1(cursor.getDouble(offset + 24));
        entity.setA(cursor.getDouble(offset + 25));
        entity.setB(cursor.getDouble(offset + 26));
        entity.setC(cursor.getDouble(offset + 27));
        entity.setD(cursor.getDouble(offset + 28));
        entity.setUser_yin(cursor.getShort(offset + 29) != 0);
        entity.setYin_a(cursor.getDouble(offset + 30));
        entity.setYin_a_symbol(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setYin_b(cursor.getDouble(offset + 32));
        entity.setYin_b_symbol(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setUser_yang(cursor.getShort(offset + 34) != 0);
        entity.setYang_a(cursor.getDouble(offset + 35));
        entity.setYang_a_symbol(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setYang_b(cursor.getDouble(offset + 37));
        entity.setYang_b_symbol(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setUser_keyi(cursor.getShort(offset + 39) != 0);
        entity.setKeyi_a(cursor.getDouble(offset + 40));
        entity.setKeyi_a_symbol(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setKeyi_b(cursor.getDouble(offset + 42));
        entity.setKeyi_b_symbol(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setTips(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setDetectionLimit(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setFinishState(cursor.getShort(offset + 46) != 0);
        entity.setCreator(cursor.getInt(offset + 47));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectFGGD entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectFGGD entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectFGGD entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
